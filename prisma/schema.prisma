generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                       String              @id @default(uuid())
  userName                 String              @unique
  dateOfBirth              DateTime
  acceptTermsAndConditions Boolean
  acceptNewsLatters        Boolean
  longitude                Float?
  latitude                 Float?
  country                  String?
  city                     String?
  qualification            Float               @default(0)
  email                    String              @unique
  password                 String
  accountCreatedAt         DateTime            @default(now())
  profilePhoto             String?             @db.LongText
  phoneNumber              String?             @unique
  publications             Publications[] // One-to-many relation
  likes                    Likes[] // One-to-many relation
  searchHistorial          SearchHistorial[]
  followers                Follow[]            @relation("Following")
  following                Follow[]            @relation("Followed")
  notifications            Notifications[]
  swap                     Swap[]              @relation("Desired")
  swapOffered              Swap[]              @relation("Offered")
  ChatRoomRecipient        ChatRoom[]          @relation("recipient")
  ChatRoomSender           ChatRoom[]          @relation("sender")
  Messages                 Messages[]
  views                    View[]
  rating                   Rating[]            @relation("qualified")
  ratingsGiven             Rating[]            @relation("ratedBy")
  eventBuilder             Events[]            @relation("creator")
  events                   Events[]            @relation("members")
  communitiesBuilder       Communities[]       @relation("creator")
  communities              Communities[]       @relation("members")
  publicationsSaved        SavedPublications[]
  comments                 Comments[]
  notificationsSent        Notifications[]     @relation("NotificationSender")
}

model Swap {
  id            String       @id @default(uuid())
  relatedPostId String
  offeredId     String
  swapState     String       @default("awaiting")
  dateTime      DateTime     @default(now())
  relatedUserId String
  offeredUserId String
  relatedPost   Publications @relation("Desired", fields: [relatedPostId], references: [id])
  offeredPost   Publications @relation("Offered", fields: [offeredId], references: [id])
  relatedUser   Users        @relation("Desired", fields: [relatedUserId], references: [id])
  offeredUser   Users        @relation("Offered", fields: [offeredUserId], references: [id])
}

model Notifications {
  id             String        @id @default(uuid())
  content        String
  type           String        @default("notification")
  isRead         Boolean       @default(false)
  createdAt      DateTime      @default(now())
  userId         String
  fromUserId     String?
  relatedPostId  String?
  relatedEventId String?
  user           Users         @relation(fields: [userId], references: [id])
  from           Users?        @relation("NotificationSender", fields: [fromUserId], references: [id])
  relatedPost    Publications? @relation(fields: [relatedPostId], references: [id])
  relatedEvent   Events?       @relation(fields: [relatedEventId], references: [id])
  sender         ChatRoom[]    @relation("NotificationSender")
  messages       Messages[]
  chatRoom       ChatRoom[]    @relation("NotificationChatRoom")
}

model ChatRoom {
  id                      String         @id @default(uuid())
  senderId                String
  recipientId             String
  notificationsReceivedId String?
  notificationsSentId     String?
  notificationsReceived   Notifications? @relation("NotificationChatRoom", fields: [notificationsReceivedId], references: [id])
  sender                  Users          @relation("sender", fields: [senderId], references: [id])
  notificationsSent       Notifications? @relation("NotificationSender", fields: [notificationsSentId], references: [id])
  recipient               Users          @relation("recipient", fields: [recipientId], references: [id])
  messages                Messages[]
}

model Messages {
  id              String         @id @default(uuid())
  content         String?
  img             String?
  createdAt       DateTime       @default(now())
  sendById        String
  chatRoomId      String
  notificationsId String?
  sendBy          Users          @relation(fields: [sendById], references: [id])
  chatRoom        ChatRoom       @relation(fields: [chatRoomId], references: [id])
  notifications   Notifications? @relation(fields: [notificationsId], references: [id])
}

model Follow {
  id           String @id @default(uuid())
  followerById String
  followedById String
  follower     Users  @relation("Followed", fields: [followerById], references: [id])
  followed     Users  @relation("Following", fields: [followedById], references: [id])
}

model Rating {
  id              String @id @default(uuid())
  rating          Int
  qualifiedUserId String
  ratedById       String
  qualifiedUser   Users  @relation("qualified", references: [id], fields: [qualifiedUserId])
  ratedBy         Users  @relation("ratedBy", references: [id], fields: [ratedById])
}

model Publications {
  id                String              @id @default(uuid())
  createdById       String
  title             String
  description       String
  longitude         Float
  latitude          Float
  current_condition String
  gender            String
  size              String?
  primary_color     String?
  brand             String?
  reserved          String              @default("No")
  publicatedAt      DateTime            @default(now())
  type              String
  createdBy         Users               @relation(fields: [createdById], references: [id])
  categories        Categories[] //Many-to-many relation
  likes             Likes[] //One-to-many relation
  tags              Tags[] //Many-to-many relation
  image             Image[] // One to many relation
  swap              Swap[]              @relation("Desired")
  swapOffered       Swap[]              @relation("Offered")
  views             View[]
  communities       Communities[]
  events            Events[]
  savedPublication  SavedPublications[]
  comments          Comments[]
  relatedPost       Notifications[]
}

model Image {
  id            String       @id @default(uuid())
  base64        String       @db.LongText
  orientation   String
  publicationId String
  publication   Publications @relation(fields: [publicationId], references: [id])
}

model Categories {
  id           String         @id @default(uuid())
  name         String         @unique
  publications Publications[] // Many-to-Many
}

model Likes {
  id            String       @id @default(uuid())
  reactionTime  DateTime     @default(now())
  userId        String
  publicationId String
  user Users @relation(fields: [userId], references: [id])
  publication   Publications @relation(fields: [publicationId], references: [id])

  @@unique([userId, publicationId])
}

model View {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  publicationId String
  userId        String
  publication   Publications @relation(fields: [publicationId], references: [id])
  user          Users        @relation(fields: [userId], references: [id])
}

model Tags {
  id           String         @id @default(uuid())
  name         String         @unique
  publications Publications[] // Many-to-Many
}

model ResetPassword {
  id        String   @id @default(uuid())
  token     Int
  email     String
  createdAt DateTime @default(now())
}

model SearchHistorial {
  id           String   @id @default(uuid())
  search       String
  searchedById String
  searchedAt   DateTime @default(now())
  searchedBy   Users    @relation(fields: [searchedById], references: [id])
}

model Events {
  id              String          @id @default(uuid())
  name            String          @unique
  description     String
  maxClothes      Int?
  Date            DateTime
  type            String
  theme           String?
  latitude        Float?
  longitude       Float?
  maximumCapacity Int
  photo           String?         @db.LongText
  verified        Boolean         @default(false)
  creatorId       String
  creator         Users           @relation("creator", fields: [creatorId], references: [id])
  members         Users[]         @relation("members")
  publications    Publications[]
  notifications   Notifications[]
}

model Communities {
  id           String         @id @default(uuid())
  name         String         @unique
  description  String
  category     String
  photo        String?        @db.LongText
  verified     Boolean        @default(false)
  creatorId    String
  creator      Users          @relation("creator", fields: [creatorId], references: [id])
  members      Users[]        @relation("members")
  publications Publications[]
}

model SavedPublications {
  id            String       @id @default(uuid())
  savedAt       DateTime     @default(now())
  userId        String
  publicationId String
  user          Users        @relation(fields: [userId], references: [id])
  publication   Publications @relation(fields: [publicationId], references: [id])
}

model Comments {
  id            String       @id @default(uuid())
  content       String
  createdAt     DateTime     @default(now())
  userId        String
  publicationId String
  publication   Publications @relation(fields: [publicationId], references: [id])
  user          Users        @relation(fields: [userId], references: [id])
}

model FrontGenre {
  id               String             @id @default(uuid())
  genre            String             @unique
  icon             String
  FrontProductType FrontProductType[]
}

model FrontCondition {
  id        String @id @default(uuid())
  condition String
  icon      String
}

model FrontProductType {
  id              String            @id @default(uuid())
  type            String
  genre           String
  icon            String
  FrontGenre      FrontGenre        @relation(fields: [genre], references: [genre])
  FrontCategories FrontCategories[]
}

model FrontCategories {
  id               String           @id @default(uuid())
  categories       String
  typeId           String
  FrontProductType FrontProductType @relation(fields: [typeId], references: [id])
  icon             String
}
